DROP TABLE IF EXISTS "User" CASCADE;
DROP TABLE IF EXISTS "Password" CASCADE;
DROP TABLE IF EXISTS "Artist" CASCADE;
DROP TABLE IF EXISTS "Follows" CASCADE;
DROP TABLE IF EXISTS "Song" CASCADE;
DROP TABLE IF EXISTS "ListeningActivity" CASCADE;
DROP TABLE IF EXISTS "Album" CASCADE;
DROP TABLE IF EXISTS "Playlist" CASCADE;
DROP TABLE IF EXISTS "PlaylistSong" CASCADE;
DROP TABLE IF EXISTS "SongAlbum" CASCADE;
DROP TABLE IF EXISTS "SongArtist" CASCADE;


-- Table 1: User (Composite username handled via First/LastName)
CREATE TABLE "User" (
    "UserID" SERIAL PRIMARY KEY,
    "Email" VARCHAR(100) UNIQUE NOT NULL,
    "DOB" DATE,
    "FirstName" VARCHAR(50) NOT NULL,
    "LastName" VARCHAR(50) NOT NULL,
    "LastUpdated" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Added missing comma
    "prmuser" BOOLEAN NOT NULL DEFAULT FALSE  -- No semicolon here
);


-- Table 2: Password (1:1 with User)
CREATE TABLE "Password" (
    "UserID" INT PRIMARY KEY,
    "PasswordHash" VARCHAR(255) NOT NULL,
    "LastUpdated" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("UserID") REFERENCES "User"("UserID") ON DELETE CASCADE
);

-- Table 3: Artist
CREATE TABLE "Artist" (
    "ArtistID" SERIAL PRIMARY KEY,
    "Name" VARCHAR(100) NOT NULL,
    "CountryFrom" VARCHAR(50),
    "DebutYear" INT CHECK ("DebutYear" > 1900)
);

-- Table 4: Album (ArtistID is FK, not PK)
CREATE TABLE "Album" (
    "AlbumID" SERIAL PRIMARY KEY,
    "Title" VARCHAR(100) NOT NULL,
    "ReleaseYear" INT CHECK ("ReleaseYear" > 1900),
    "ArtistID" INT NOT NULL,
    FOREIGN KEY ("ArtistID") REFERENCES "Artist"("ArtistID")
);

-- Table 5: Song (No direct Album link; many-to-many via SongAlbum)
CREATE TABLE "Song" (
    "SongID" SERIAL PRIMARY KEY,
    "Title" VARCHAR(100) NOT NULL,
    "Duration" INT CHECK ("Duration" > 0),
    "ReleaseDate" DATE,
    "Genre" VARCHAR(50),
    "Language" VARCHAR(50)
);

-- Junction Table: SongAlbum (Many-to-many between Song and Album)
CREATE TABLE "SongAlbum" (
    "SongID" INT,
    "AlbumID" INT,
    PRIMARY KEY ("SongID", "AlbumID"),
    FOREIGN KEY ("SongID") REFERENCES "Song"("SongID"),
    FOREIGN KEY ("AlbumID") REFERENCES "Album"("AlbumID")
);

-- Table 6: Playlist (1:M with User)
CREATE TABLE "Playlist" (
    "PlaylistID" SERIAL PRIMARY KEY,
    "UserID" INT NOT NULL,
    "Title" VARCHAR(100) NOT NULL,
    "CreationDate" DATE NOT NULL,
    FOREIGN KEY ("UserID") REFERENCES "User"("UserID")
);

-- Table 7: ListeningActivity (M:1 with User, includes count)
CREATE TABLE "ListeningActivity" (
    "ActivityID" SERIAL PRIMARY KEY,
    "UserID" INT NOT NULL,
    "SongID" INT NOT NULL,
    "ActivityDate" TIMESTAMP NOT NULL,
    "Count" INT DEFAULT 1 CHECK ("Count" > 0),
    FOREIGN KEY ("UserID") REFERENCES "User"("UserID"),
    FOREIGN KEY ("SongID") REFERENCES "Song"("SongID")
);

-- Table 8: Follows (M:N with FollowCount)
CREATE TABLE "Follows" (
    "UserID" INT,
    "ArtistID" INT,
    "FollowDate" DATE NOT NULL,
    -- "FollowsCount" INT DEFAULT 1,
    PRIMARY KEY ("UserID", "ArtistID"),
    FOREIGN KEY ("UserID") REFERENCES "User"("UserID"),
    FOREIGN KEY ("ArtistID") REFERENCES "Artist"("ArtistID")
);

-- Table 9: PlaylistSong (M:N with DateAdded)
CREATE TABLE "PlaylistSong" (
    "PlaylistID" INT,
    "SongID" INT,
    "DateAdded" DATE NOT NULL,
    PRIMARY KEY ("PlaylistID", "SongID"),
    FOREIGN KEY ("PlaylistID") REFERENCES "Playlist"("PlaylistID"),
    FOREIGN KEY ("SongID") REFERENCES "Song"("SongID")
);

-- Table 10: SongArtist (M:N for Release relationship)
CREATE TABLE "SongArtist" (
    "SongID" INT,
    "ArtistID" INT,
    PRIMARY KEY ("SongID", "ArtistID"),
    FOREIGN KEY ("SongID") REFERENCES "Song"("SongID"),
    FOREIGN KEY ("ArtistID") REFERENCES "Artist"("ArtistID")
);